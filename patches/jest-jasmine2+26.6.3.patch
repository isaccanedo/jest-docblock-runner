diff --git a/node_modules/jest-jasmine2/build/ExpectationFailed.d.ts b/node_modules/jest-jasmine2/build/ExpectationFailed.d.ts
index 657f1cc..eacd8f3 100644
--- a/node_modules/jest-jasmine2/build/ExpectationFailed.d.ts
+++ b/node_modules/jest-jasmine2/build/ExpectationFailed.d.ts
@@ -4,5 +4,4 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
-export default class ExpectationFailed extends Error {
-}
+export default class ExpectationFailed extends Error {}
diff --git a/node_modules/jest-jasmine2/build/index.js b/node_modules/jest-jasmine2/build/index.js
index 5807f6f..8bed59a 100644
--- a/node_modules/jest-jasmine2/build/index.js
+++ b/node_modules/jest-jasmine2/build/index.js
@@ -71,7 +71,7 @@ const JASMINE = require.resolve('./jasmine/jasmineLight');
 const jestEachBuildDir = path.dirname(require.resolve('jest-each'));
 
 async function jasmine2(globalConfig, config, environment, runtime, testPath) {
-  var _runtime$unstable_sho2;
+  var _config$testNamePatte, _runtime$unstable_sho2;
 
   const reporter = new _reporter.default(globalConfig, config, testPath);
   const jasmineFactory = runtime.requireInternalModule(JASMINE);
@@ -212,8 +212,16 @@ async function jasmine2(globalConfig, config, environment, runtime, testPath) {
         globalConfig.enabledTestsMap[spec.result.testPath];
       return (suiteMap && suiteMap[spec.result.fullName]) || false;
     };
-  } else if (globalConfig.testNamePattern) {
-    const testNameRegex = new RegExp(globalConfig.testNamePattern, 'i');
+  }
+
+  const testNamePattern =
+     (_config$testNamePatte = config.testNamePattern) !== null &&
+     _config$testNamePatte !== void 0
+       ? _config$testNamePatte
+       : globalConfig.testNamePattern;
+
+   if (testNamePattern) {
+     const testNameRegex = new RegExp(testNamePattern, 'i');
 
     env.specFilter = spec => testNameRegex.test(spec.getFullName());
   } // TODO: remove ? in Jest 26
